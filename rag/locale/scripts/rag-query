#!/bin/bash

# Script wrapper per interrogare il sistema RAG locale
# Eseguibile da /home/paolo/script/llm ma lavora sui file in /opt/progetti/RAG-locale
# Utilizzo: rag-query

set -e  # Esci in caso di errore

# Directory fissa del progetto RAG
RAG_HOME="/opt/progetti/RAG-locale"

# Colori per output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color
BOLD='\033[1m'
DIM='\033[2m'

# Funzione per stampare con colori
print_header() {
    echo -e "\n${BLUE}${BOLD}═══════════════════════════════════════════════════════${NC}"
    echo -e "${CYAN}${BOLD}  $1${NC}"
    echo -e "${BLUE}${BOLD}═══════════════════════════════════════════════════════${NC}\n"
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_info() {
    echo -e "${YELLOW}→${NC} $1"
}

# Salva la directory corrente
ORIGINAL_DIR=$(pwd)

# Header principale
clear
print_header "🤖 RAG Locale - Sistema di Q&A basato su Obsidian"

# Verifica che la directory del progetto RAG esista
if [ ! -d "$RAG_HOME" ]; then
    print_error "Directory RAG non trovata: $RAG_HOME"
    print_info "Assicurati che il progetto RAG-locale sia installato in /opt/progetti/RAG-locale"
    exit 1
fi

print_info "RAG Project: ${CYAN}$RAG_HOME${NC}"
print_info "Script eseguito da: ${CYAN}$ORIGINAL_DIR${NC}"

# Vai alla directory del progetto
cd "$RAG_HOME"

# Controlla se lo script principale esiste
if [ ! -f "simple_rag.py" ]; then
    print_error "Errore: simple_rag.py non trovato in $RAG_HOME"
    exit 1
fi

# Controlla se l'ambiente virtuale esiste
if [ ! -d ".venv" ]; then
    print_error "Ambiente virtuale non trovato!"
    print_info "Creazione ambiente virtuale in corso..."
    python3 -m venv .venv
    print_success "Ambiente virtuale creato"
    
    # Installa dipendenze
    source .venv/bin/activate
    print_info "Installazione dipendenze..."
    pip install -r requirements.txt -q
    print_success "Dipendenze installate"
else
    # Attiva l'ambiente virtuale
    source .venv/bin/activate
fi

# Controlla se l'indice esiste
if [ ! -d "obsidian_index" ]; then
    print_error "Indice non trovato!"
    print_info "È necessario eseguire prima l'ingestion dei documenti"
    echo -e "${CYAN}Esegui: ${BOLD}rag-ingest${NC}\n"
    exit 1
fi

# Mostra info sull'indice
INDEX_FILES=$(ls -1 obsidian_index/ 2>/dev/null | wc -l)
INDEX_SIZE=$(du -sh obsidian_index 2>/dev/null | cut -f1)
echo -e "${DIM}📚 Indice caricato: $INDEX_FILES file, dimensione $INDEX_SIZE${NC}"

# NOTA: Con le modifiche recenti, ora usiamo llamafile CLI (no server)
# Il sistema è configurato per funzionare senza server HTTP
print_success "Usando llamafile CLI (modalità diretta, no server)"

# Istruzioni per l'utente
echo -e "\n${GREEN}${BOLD}Sistema pronto!${NC}"
echo -e "${DIM}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${CYAN}Comandi disponibili:${NC}"
echo -e "  ${BOLD}exit${NC}, ${BOLD}quit${NC}, ${BOLD}q${NC} - Esci dal sistema"
echo -e "  ${BOLD}clear${NC}, ${BOLD}cls${NC}      - Pulisci lo schermo"
echo -e "  ${BOLD}help${NC}, ${BOLD}?${NC}         - Mostra questa guida"
echo -e "${DIM}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "\n${MAGENTA}💡 Suggerimenti query migliorate:${NC}"
echo -e "   ${BOLD}File specifici:${NC}  ${DIM}\"Per quali clienti ho scritto un file corpus?\"${NC}"
echo -e "   ${BOLD}Clienti:${NC}        ${DIM}\"Quali sono i concorrenti di Didonè Comacchio?\"${NC}" 
echo -e "   ${BOLD}Date/Journal:${NC}   ${DIM}\"Cosa ho fatto oggi?\" / \"Attività del 15/08/2024\"${NC}"
echo -e "\n${CYAN}🚀 Miglioramenti:${NC} Token aumentati (2048), k dinamico, 14+ clienti corpus trovati\n"

# Esegui il sistema RAG
python simple_rag.py

# Cleanup - torna alla directory originale
cd "$ORIGINAL_DIR"
echo -e "\n${CYAN}Arrivederci!${NC}"