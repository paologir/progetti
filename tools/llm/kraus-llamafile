#!/usr/bin/env python3
import requests
import sys

# Configurazione del server locale
LLAMAFILE_URL = "http://localhost:8080/completion"

# System prompt di Karl Kraus
KARL_KRAUS_SYSTEM_PROMPT = """
Lo stile aforistico, la critica sociale e linguistica di Karl Kraus. Rispondi con aforismi brevi, taglienti e satirici, come Kraus avrebbe fatto oggi. Ogni risposta deve essere un'osservazione pungente sulla società contemporanea, con linguaggio preciso e critica impietosa. Massimo 3-4 frasi per risposta. Rispondi solo con la risposta, senza altre domande o testo aggiuntivo.
"""

def query_local_model(prompt_text, response_number=1):
    """Invia il prompt al modello locale tramite llamafile."""
    full_prompt = f"{KARL_KRAUS_SYSTEM_PROMPT}\n\nDomanda: {prompt_text}\nRisposta nello stile di Karl Kraus (variante {response_number}):"
    
    payload = {
        "prompt": full_prompt,
        "n_predict": 200,
        "temperature": 0.8,  # Un po' più alta per maggiore varietà
        "top_k": 40,
        "top_p": 0.95,
        "repeat_penalty": 1.2,
        "stop": ["\n\n\n", "\n==="]
    }

    try:
        print(f"🔄 Generazione risposta {response_number}...")
        response = requests.post(LLAMAFILE_URL, json=payload, timeout=120)
        
        if response.status_code == 200:
            result = response.json()
            content = result.get("content", "")
            # Pulizia della risposta
            lines = content.split('\n')
            cleaned_lines = []
            for line in lines:
                if line.strip().startswith("Domanda:") or line.strip().startswith("===="):
                    break
                if line.strip():
                    cleaned_lines.append(line)
            
            final_content = '\n'.join(cleaned_lines).strip()
            return final_content
        else:
            print(f"❌ Errore server: {response.status_code}")
            return ""
            
    except Exception as e:
        print(f"❌ Errore: {e}")
        return ""

def get_multiline_input():
    """Gestisce l'input multilinea"""
    print("Chiedi qualcosa a Karl Kraus (termina con 'EOF' su una nuova linea):")
    lines = []
    while True:
        try:
            line = input('> ')
            if line.strip().lower() == 'eof':
                break
            lines.append(line)
        except EOFError:
            break
    return "\n".join(lines)

def generate_multiple_responses(user_input):
    """Genera 3 risposte diverse per lo stesso prompt"""
    print("\n🧠 Generazione di 3 risposte diverse...")
    responses = []
    
    for i in range(3):
        response = query_local_model(user_input, i+1)
        if response:
            responses.append(response)
        else:
            print(f"😞 Nessuna risposta {i+1} ricevuta.")
    
    return responses

def main():
    print("=== Karl Kraus AI - Versione Locale (3 Risposte) ===")
    
    # Test connessione
    try:
        test_response = requests.get("http://localhost:8080", timeout=5)
        print("✅ Connesso al server llamafile")
    except:
        print("❌ Server non raggiungibile!")
        print("Avvia con: ./gemma3-4b.llamafile --server --port 8080")
        return

    try:
        while True:
            user_input = get_multiline_input()
            
            if user_input.lower() in ["exit", "quit"]:
                print("Arrivederci!")
                break

            if not user_input.strip():
                print("Input vuoto.")
                continue

            # Genera 3 risposte
            responses = generate_multiple_responses(user_input)
            
            if responses:
                print("\n" + "="*60)
                print(f"DOMANDA: {user_input}")
                print("="*60)
                
                for i, response in enumerate(responses, 1):
                    if response:
                        print(f"\n🎯 RISPOSTA {i}:")
                        print("-" * 20)
                        print(response)
            else:
                print("😞 Nessuna risposta ricevuta.")

            # Chiedi se continuare
            try:
                choice = input("\nContinuare? (s/n): ").lower()
                if choice != 's':
                    print("Arrivederci!")
                    break
            except KeyboardInterrupt:
                print("\nArrivederci!")
                break
                
    except KeyboardInterrupt:
        print("\n\nArrivederci!")
    except Exception as e:
        print(f"\n❌ Errore imprevisto: {e}")

if __name__ == "__main__":
    main()